import time
import os
import secrets
from cryptography.hazmat.primitives import hashes
import pre_deployment

class UserRegistration:
    def __init__(self, ta, user_id, password, biometric_data):
        self.ta = ta
        self.user_id = user_id
        self.password = password
        self.biometric_data = biometric_data
        self.biometric_hash = None
        self.Vi = None
        self.RTi = None
        self.mi_prime = None
        self.Hn = None
        self.RPW = None
        self.Bi = None
        self.Ri = None
        self.smart_card = {}

    def register_user(self):
        # Step 1: User generates random nonce bi
        bi = self.generate_nonce()

        # Step 2: User computes UIDi = h1(IDi||bi)
        UIDi = self.h1(self.user_id + bi)

        # Step 3: Send UIDi to Trusted Authority (TA)
        print(f"UIDi generated: {UIDi.hex()} sent to TA")

        # Step 4: TA generates random nonce e and registration timestamp RTi
        e = self.ta._generate_n()  # Nonce generated by TA
        RTi = self.ta._generate_rt()

        # Step 5: TA computes mi = h1(x||e).G and Vi = h1(x||e) ⊕ hi(UIDi)
        mi = self.ta.h1(self.ta.master_key.private_numbers().private_value.to_bytes(48, 'big') + e.to_bytes(48, 'big'))
        Vi = self.ta.h1(self.ta.master_key.private_numbers().private_value.to_bytes(48, 'big') + e.to_bytes(48, 'big')) ^ int.from_bytes(self.ta.h2(UIDi), 'big')

        # TA sends Vi and RTi to the user
        self.Vi = Vi
        self.RTi = RTi

        print(f"TA sends Vi: {Vi}, RTi: {RTi}")

        # Step 6: User selects password and imprints biometric data
        self.biometric_hash = self.generate_biometric_hash(self.biometric_data)
        
        # Step 7: User computes Gen(BIOi) = (σi, τi)
        σi, τi = self.generate_bio(self.biometric_hash)

        # Step 8: User computes h(x||e)'
        h_x_e_prime = Vi ^ int.from_bytes(self.ta.h2(UIDi), 'big')
        
        # Step 9: User computes m'i = h1(x||e)'.G
        mi_prime = self.ta.h1(h_x_e_prime.to_bytes(48, 'big'))
        self.mi_prime = mi_prime

        # Step 10: User computes Hn = h1(UIDi||m'i||RTi)
        self.Hn = self.ta.h1(UIDi + mi_prime.to_bytes(48, 'big') + RTi.to_bytes(48, 'big'))

        # Step 11: User computes RPW = h1(PWi||σi||m'i)
        self.RPW = self.ta.h1(self.password + σi + mi_prime.to_bytes(48, 'big'))

        # Step 12: User computes Bi = h1(H'n||RPW||bi)
        self.Bi = self.ta.h1(self.Hn + self.RPW + bi)

        # Step 13: User computes Ri = bi ⊕ h1(IDi||PWi||σi)
        self.Ri = bi ^ int.from_bytes(self.ta.h1(self.user_id + self.password + σi), 'big')

        # Step 14: Store values in the smart card
        self.smart_card = {
            "Bi": self.Bi,
            "Ri": self.Ri,
            "Gen(.)": σi,
            "Rep(.)": τi,
            "h1(.)": self.ta.h1,
            "h2(.)": self.ta.h2,
            "Vi": self.Vi,
            "RTi": self.RTi,
        }

        print("User Registration Completed. Smart card data stored.")

    def generate_nonce(self):
        return os.urandom(32)

    def h1(self, data):
        digest = hashes.Hash(hashes.SHA3_512())
        digest.update(data)
        return digest.finalize()

    def generate_biometric_hash(self, biometric_data):
        return self.h1(biometric_data)

    def generate_bio(self, biometric_hash):
        # Placeholder function to simulate Gen(BIOi) = (σi, τi)
        σi = self.h1(biometric_hash + b'sigma')
        τi = self.h1(biometric_hash + b'tau')
        return σi, τi

if __name__ == "__main__":
    ta = pre_deployment.TrustedAuthority()
    user_id = b"user_1"
    password = b"secure_password"
    biometric_data = b"user_fingerprint_data"

    user_registration = UserRegistration(ta, user_id, password, biometric_data)
    user_registration.register_user()

    # Print stored smart card data
    print("Smart Card Data:", user_registration.smart_card)
